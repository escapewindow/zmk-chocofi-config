#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

#include <behaviors.dtsi>

#include "zmk-helpers/helper.h"
#include "keys/36.h"

// global
#define QUICK_TAP_MS 150
#define TAPPING_TERM_MS 200
#define PRIOR_IDLE_MS 150

// layers
#define BASE 0
#define NUM 1
#define FN 2
#define BOARD 3

// redefined keycodes
#define _LWIN_    &kp LEFT_WIN
#define _RALT_    &kp RIGHT_ALT
#define _RET_     &kp RETURN
#define _CUT_     &kp LG(X)
#define _COPY_    &kp LG(C)
#define _PASTE_   &kp LG(V)

#define _MO_NUM_ &mo NUMBER

#define OUTTOG   &out OUT_TOG // toggle keyboard output bluetooth/usb
#define ___      &trans      //  transparent
#define _x_      &none

#define MEH LC(LS(LALT))

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
// ZMK_MOD_MORPH(smart_shift,
//     bindings = <&sk LSHFT>, <&caps_word>;
//     mods = <(MOD_LSFT)>;
// )

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <LEFT_KEYS THUMB_KEYS>;
    hold-trigger-on-release;
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <RIGHT_KEYS THUMB_KEYS>;
    hold-trigger-on-release;
)

/* left-hand HRM shift */
ZMK_BEHAVIOR(hml_s, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <LEFT_KEYS THUMB_KEYS>;
    // hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRM shift */
ZMK_BEHAVIOR(hmr_s, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <RIGHT_KEYS THUMB_KEYS>;
    // hold-trigger-on-release;             // delay positional check until key-release
)


/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};
/ {
  combos {
      compatible = "zmk,combos";
//      iu_backspace_combo {
//        timeout-ms = <50>; // Adjust as needed
//        bindings = <&kp COLON>; // Action: Backspace
//        key-positions = <16 17>;
//        layers = < BASE >;
//      };
//      jk_colon_combo {
//        timeout-ms = <50>; // Adjust as needed
//        bindings = <&smart_shift>; // Action: Backspace
//        key-positions = <12 13>;
//        layers = < BASE >;
//      };

  };
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      flavor = "balanced";
      tapping-term-ms = <280>;
      quick-tap-ms = <QUICK_TAP_MS>; 
      bindings = <&kp>, <&kp>;
      // label = "HOMEROW_MODS";
      #binding-cells = <2>;
      // hold-trigger-key-positions = <TRIGGER_POS>;
      hold-trigger-on-release;

    };
    SBD: S_BSPC_DEL {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp BSPC>, <&kp DEL>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    oneshot_esc: oneshot {
      compatible = "zmk,behavior-oneshot";
      label = "OneShot ESC";
      #binding-cells = <0>;
    };
    td0: tap_dance_0 {
       compatible = "zmk,behavior-tap-dance";
       #binding-cells = <0>;
       tapping-term-ms = <200>;
       bindings = C_VOL_DOWN, C_PREV;
    };
    td1: tap_dance_1 {
       compatible = "zmk,behavior-tap-dance";
       #binding-cells = <0>;
       tapping-term-ms = <200>;
       bindings = C_MUTE, C_PP;
    };
    td2: tap_dance_2 {
       compatible = "zmk,behavior-tap-dance";
       #binding-cells = <0>;
       tapping-term-ms = <200>;
       bindings = C_VOL_UP, C_NEXT;
    };
  };
  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <1 2>;
      then-layer = <3>;
    };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";
    base_layer {

      bindings = <
        // |---------------|--------------|-------------|--------------|-------------|   |-----------|--------------|-------------|--------------|------------------|
        // |     Q         |      W       |     E       |      R       |     T       |   |     Y     |      U       |     I       |     O        |         P        |
              &kp Q            &kp W          &kp E         &kp R         &kp T             &kp Y       &kp U         &kp I          &kp O              &kp P
        // |---------------|--------------|-------------|--------------|-------------|   |-----------|--------------|-------------|--------------|------------------|
        // |     A         |      S       |     D       |      F       |     G       |   |     H     |      J       |     K       |     L        |         ;        |
              &kp A          &hml LALT S    &hml LGUI D   &hml LCTRL F    &kp G             &kp H      &hmr RCTRL J   &hmr RGUI K    &hmr RALT L        &kp SEMI
        // |---------------|--------------|-------------|--------------|-------------|   |-----------|--------------|-------------|--------------|------------------|
        // |     Z         |      X       |     C       |      V       |     B       |   |     N     |      M       |     ,       |     .        |         /        |
             &hml LSHIFT Z     &kp X         &kp C          &kp V         &kp B             &kp N        &kp M         &kp COMMA     &kp DOT       &hmr RSHIFT FSLH
        // |---------------|--------------|-------------|--------------|-------------|   |-----------|--------------|-------------|--------------|------------------|
                                            &kp RETURN    &lt NUM ESC     &mo FN            &mo NUM      &kp BSPC      &kp SPACE
        //                                |-------------|--------------|-------------|   |-----------|--------------|-------------|
      >;
    };
    number_layer {

      bindings = <
        // |---------------|---------------|--------------|---------------|-------------|   |----------|---------------|------------|---------------|-----------------|
        // |      1        |        2      |       3      |       4       |     5       |   |    6     |      7        |     8      |       9       |         0       |
               &kp N1            &kp N2         &kp N3         &kp N4        &kp N5           &kp N6       &kp N7        &kp N8          &kp N9            &kp N0
        // |---------------|---------------|--------------|---------------|-------------|   |----------|---------------|------------|---------------|-----------------|
        // |      `        |        -      |      [       |       ]       | Lock Layer  |   |   Left   |      Down     |     Up     |     Right     |        '        |
               &kp TILDE    &hml LALT MINUS &hml LGUI LBKT &hml LCTRL RBKT    &tog NUM        &kp LEFT  &hmr RCTRL DOWN &hmr RGUI UP &hmr RALT RIGHT      &kp APOS
        // |---------------|---------------|--------------|---------------|-------------|   |----------|---------------|------------|---------------|-----------------|
        // |    LSHIFT     |      None     | Search / F11 |  Dock / F12   |    BASE     |   |   None   |      =        |            |               |        \        |
             &kp LSHIFT            _x_         &kp F11         &kp F12       &to BASE            _x_       &kp EQUAL        ___             ___       &hmr RSHIFT BSLH
        // |---------------|---------------|--------------|---------------|-------------|   |----------|---------------|------------|---------------|-----------------|
                                               &kp TAB           ___            ___              ___         ___            ___
        //                                 |--------------|---------------|-------------|   |----------|---------------|------------|
      >;
    };
    fn_layer {

      bindings = <
        // |---------------|---------------|--------------|---------------|-------------|   |------------|---------------|------------|---------------|-----------------|
        // |     F1        |       F2      |      F3      |      F4       |    F5       |   |     F6     |     F7        |    F8      |      F9       |       F10       |
               &kp F1            &kp F2         &kp F3         &kp F4        &kp F5             &kp F6       &kp F7        &kp F8          &kp F9           &kp F10
        // |---------------|---------------|--------------|---------------|-------------|   |------------|---------------|------------|---------------|-----------------|
        // |     End       |      PgUp     |     PgDn     |     Home      | Lock Layer  |   | Mouse Left |   Mouse Down  |  Mouse Up  |  Mouse Right  |                 |
               &kp TILDE    &hml LALT MINUS &hml LGUI LBKT &hml LCTRL RBKT    &tog FN        &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP &mmv MOVE_RIGHT     _x_
        // |---------------|---------------|--------------|---------------|-------------|   |------------|---------------|------------|---------------|-----------------|
        // |    LSHIFT     |    Vol-;Prev  |   Mute;Play  |  Vol+;FF      |    BASE     |   |            |               |            |               |                 |
             &kp LSHIFT           &td0           &td1          &td2          &to BASE        &mmv SCRL_LEFT &mmv SCRL_DOWN &mmv SCRL_UP &mmv SCRL_RIGHT     _x_
        // |---------------|---------------|--------------|---------------|-------------|   |------------|---------------|------------|---------------|-----------------|
                                                  ___           ___            ___               ___          RCLK            LCLK
        //                                 |--------------|---------------|-------------|   |------------|---------------|------------|
      >;

    };
    board_layer {

      bindings = <
        // |---------------|---------------|--------------|---------------|-------------|   |------------|---------------|------------|---------------|-----------------|
              &bootloader        _x_            _x_            _x_         &bt BT_CLR_ALL     &bt BT_CLR       _x_            _x_            _x_              _x_
        // |---------------|---------------|--------------|---------------|-------------|   |------------|---------------|------------|---------------|-----------------|
                  _x_             _x_        &out OUT_USB   &out OUT_BLE        _x_          &bt BT_SEL 0 &bt BT_SEL 1   &bt BT_SEL 2 &bt BT_SEL 3      &bt BT_SEL 4
        // |---------------|---------------|--------------|---------------|-------------|   |------------|---------------|------------|---------------|-----------------|
                  _x_             _x_            _x_            _x_             _x_          &bt BT_DISC 0 &bt BT_DISC 1  &bt BT_DISC 2 &bt BT_DISC 3   &bt BT_DISC 4
        // |---------------|---------------|--------------|---------------|-------------|   |------------|---------------|------------|---------------|-----------------|
                                                 _x_            ___              ___              ___          _x_           _x_
        //                                 |--------------|---------------|-------------|   |------------|---------------|------------|
      >;

    };

  };
};


// vim:ft=cpp
